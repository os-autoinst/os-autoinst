#!BuildTag: os-autoinst_dev
FROM opensuse/tumbleweed

# Define environment variable
ENV NAME openQA test environment
ENV LANG en_US.UTF-8

RUN zypper ar -f -G 'http://download.opensuse.org/repositories/devel:/openQA/openSUSE_Tumbleweed' devel_openqa

# AUTODEPS START
# This part is autogenerated by tools/update-deps from dependencies.yaml
RUN zypper in -y -C \
       'pkgconfig(fftw3)' \
       'pkgconfig(libpng)' \
       'pkgconfig(opencv)' \
       'pkgconfig(sndfile)' \
       'pkgconfig(theoraenc)' \
       aspell-en \
       aspell-spell \
       cmake \
       cpio \
       gcc-c++ \
       git-core \
       ninja \
       perl-base \
       pkg-config \
       procps \
       python3-black \
       python3-setuptools \
       python3-yamllint \
       qemu \
       qemu-tools \
       qemu-x86 \
       sudo \
       which \
       'perl(B::Deparse)' \
       'perl(Benchmark)' \
       'perl(Carp)' \
       'perl(Carp::Always)' \
       'perl(Class::Accessor::Fast)' \
       'perl(Config)' \
       'perl(Cpanel::JSON::XS)' \
       'perl(Crypt::DES)' \
       'perl(Cwd)' \
       'perl(Data::Dumper)' \
       'perl(Devel::Cover)' \
       'perl(Devel::Cover)' \
       'perl(Devel::Cover::Report::Codecov)' \
       'perl(Digest::MD5)' \
       'perl(DynaLoader)' \
       'perl(English)' \
       'perl(Errno)' \
       'perl(Exception::Class)' \
       'perl(Exporter)' \
       'perl(ExtUtils::testlib)' \
       'perl(Fcntl)' \
       'perl(File::Basename)' \
       'perl(File::Find)' \
       'perl(File::Path)' \
       'perl(File::Spec)' \
       'perl(File::Temp)' \
       'perl(File::Touch)' \
       'perl(File::Which)' \
       'perl(FindBin)' \
       'perl(IO::Handle)' \
       'perl(IO::Scalar)' \
       'perl(IO::Select)' \
       'perl(IO::Socket)' \
       'perl(IO::Socket::INET)' \
       'perl(IO::Socket::UNIX)' \
       'perl(IPC::Open3)' \
       'perl(IPC::Run::Debug)' \
       'perl(IPC::System::Simple)' \
       'perl(Inline::Python)' \
       'perl(List::MoreUtils)' \
       'perl(List::Util)' \
       'perl(Mojo::IOLoop::ReadWriteProcess)' \
       'perl(Mojo::JSON)' \
       'perl(Mojo::Log)' \
       'perl(Mojo::URL)' \
       'perl(Mojo::UserAgent)' \
       'perl(Mojolicious)' \
       'perl(Mojolicious::Lite)' \
       'perl(Net::DBus)' \
       'perl(Net::IP)' \
       'perl(Net::SNMP)' \
       'perl(Net::SSH2)' \
       'perl(POSIX)' \
       'perl(Perl::Critic)' \
       'perl(Perl::Critic::Freenode)' \
       'perl(Perl::Critic::Policy)' \
       'perl(Perl::Critic::Utils)' \
       'perl(Perl::Tidy)' \
       'perl(Pod::Coverage)' \
       'perl(Pod::Html)' \
       'perl(Pod::Spell)' \
       'perl(Scalar::Util)' \
       'perl(Socket)' \
       'perl(Socket::MsgHdr)' \
       'perl(Term::ANSIColor)' \
       'perl(Test::Fatal)' \
       'perl(Test::Mock::Time)' \
       'perl(Test::MockModule)' \
       'perl(Test::MockObject)' \
       'perl(Test::Mojo)' \
       'perl(Test::Most)' \
       'perl(Test::Output)' \
       'perl(Test::Pod)' \
       'perl(Test::Strict)' \
       'perl(Test::Warnings)' \
       'perl(Thread::Queue)' \
       'perl(Time::HiRes)' \
       'perl(Try::Tiny)' \
       'perl(XML::LibXML)' \
       'perl(XML::SemanticDiff)' \
       'perl(YAML::PP)' \
       'perl(autodie)' \
       'perl(base)' \
       'perl(constant)' \
       'perl(integer)' \
       'perl(strict)' \
       'perl(version)' \
       'perl(warnings)' \
   && zypper clean
# AUTODEPS END


# Comment this out to run on newer docker versions
# Otherwise you'll get:
# This QEMU binary requires the membarrier system call.
# Please upgrade your system to a newer version of Linux

#RUN zypper -n addrepo http://download.opensuse.org/repositories/devel:/openQA:/ci/openSUSE_Tumbleweed qemu \
#    && zypper -n --gpg-auto-import-keys --no-gpg-checks refresh \
#    && zypper -n in --from qemu qemu qemu-x86 qemu-tools qemu-ipxe qemu-sgabios qemu-seabios

VOLUME ["/sys/fs/cgroup", "/run"]

CMD ["/sbin/init"]

ENV OPENQA_DIR /opt/openqa
ENV NORMAL_USER squamata

RUN echo "$NORMAL_USER ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
    useradd -r -d /home/$NORMAL_USER -m -g users --uid=1000 $NORMAL_USER
VOLUME [ "/opt/openqa" ]

# explicitly set user/group IDs

RUN mkdir -p /opt/testing_area && \
    chown -R $NORMAL_USER:users /opt/testing_area

ENTRYPOINT ["/bin/bash"]
WORKDIR $OPENQA_DIR
