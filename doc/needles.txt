Some packages are required to run crop.py. So for the first time do:
  zypper in python-imaging python-tk

To create needles or to adjust test cases the easiest way is to run start.pl
interactively. Parameters for the installation are stored in environment
variables. You want to run start.pl in some empty directory with enough free
space left. Disk images, screenshots etc will be created relative to
the directory start.pl is called from.

Most important environment variables:
- DISTRI: specifies which subdirectory of 'distri' should be used
  for the test run, e.g. 'opensuse'.
- ISO: path to the iso image to install from
- DESKTOP: gnome, kde, xfce, lxde, minimalx, textmode
- VIDEOMODE: empty for default or 'text'
- QEMUPORT: port used for the qemu monitor. Default is 15222. Always
  increase by two as one port higher is a monitor multiplexer.

For development/debugging you also want
- interactive_crop: specifies the suffix for new needle names and is
  also the trigger to call the interactive crop editor when a needle
  is not found. Example: use e.g. '-text' if you are needling text
  mode.
- scaledhack: set to 1 if you want to be able to replace screenshots
  of needles with newly taken screenshots and potentially scale the
  regions of the needle to the new resolution.


Example how to run start.pl:
$ mkdir /space/openqa
$ cd /space/openqa/
$ DISTRI=opensuse ISO=/path/to/dvd.iso DESKTOP=gnome interactive_crop=1 scaledhack=1 /path/to/start.pl

crop.py can be used to interactively edit needles. It takes a json
file or a png as argument.


== Needle File Format ==

Needles consist of a screenshot in png format and a json file with
the same name (e.g. foo.png and foo.json)
Needles are stored in distri/$DISTRI/needles

File format:
{
   "area" : [
      {
         "xpos" : INTEGER,
         "ypos" : INTEGER,
         "width" : INTEGER,
         "height" : INTEGER,
         "type" : ( "match" | "ocr" | "exclude" ),
         "match" : INTEGER, // 0-100. similarity percentage
	 /* "processing_flags" : STRING, */ // unused
	 /* "max_offset" : STRING, */ // unused
      },
      ...
   ],
   "tags" : [
      STRING, ...
   ]
}


== using needles in tests ==

=== waitforneedle ===

Tests can wait for a needle to appear by calling 'waitforneedle'. It
takes the name of a tag or an array of needles as first argument.
The second argument is an optional timeout. The function repeatedly
takes screenshots until a matching needle is found. For a match a
hash ref consisting of the following items is returned:

{
	similarity => $sim, # similarity percentage, fraction 0..1
	x => INTEGER, # area of the match
	y => INTEGER,
	w => INTEGER,
	h => INTEGER,
	needle => $needle # reference ot matched needle
}

If no match is found waitforneedle calls die()

=== checkneedle ===

same as waitforneedle but doesn't die

=== goandclick ===

similar to waitforneedle but clicks into area that is defined last
in the needle. takes one up to four arguments:
1. needle tag or array of needles
2. mouse button
3. timeout
4. time to hold the mouse button down

NOTE: this function currently does not work due to bugs in qemu:
https://bugs.launchpad.net/qemu/+bug/752476
